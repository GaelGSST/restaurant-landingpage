hugo_env: &hugo_env
  BASE_URL: http://drone-bucket-s3-restaurant.s3-website-us-east-1.amazonaws.com

# Pipeline pour build et cr√©ation de release
kind: pipeline
type: docker
name: build-and-release

trigger:
  event:
    - push
  branch:
    - master

steps:
  - name: hugo-build
    image: peaceiris/hugo:v0.65.3-mod
    environment:
      <<: *hugo_env
    commands:
      - hugo --baseURL $BASE_URL

  - name: create-release-archive
    image: alpine:latest
    commands:
      - apk add --no-cache tar gzip
      - tar -czf restaurant-website-release-${DRONE_BUILD_NUMBER}.tar.gz -C public .
      - echo "Created archive restaurant-website-release-${DRONE_BUILD_NUMBER}.tar.gz"

  - name: upload-release-to-s3
    image: amazon/aws-cli:2.13.7
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_SESSION_TOKEN:
        from_secret: aws_session_token
      AWS_DEFAULT_REGION: us-east-1
    commands:
      - aws s3 cp restaurant-website-release-${DRONE_BUILD_NUMBER}.tar.gz s3://drone-bucket-s3-restaurant-realease/restaurant-website-release-${DRONE_BUILD_NUMBER}.tar.gz
      - echo "Uploaded release archive to S3"

---
# Pipeline pour promote (d√©ploiement)
kind: pipeline
type: docker
name: promote-to-production

trigger:
  event:
    - promote
  target:
    - production

steps:
  - name: deploy-release-to-production
    image: alpine:latest
    environment:
      AWS_ACCESS_KEY_ID:
        from_secret: aws_access_key_id
      AWS_SECRET_ACCESS_KEY:
        from_secret: aws_secret_access_key
      AWS_SESSION_TOKEN:
        from_secret: aws_session_token
      AWS_DEFAULT_REGION: us-east-1
    commands:
      - |
        # Installer les outils n√©cessaires
        apk add --no-cache aws-cli tar gzip

        # R√©cup√©rer le param√®tre version (pass√© via --param version=XX)
        VERSION=$${PLUGIN_VERSION:-${DRONE_BUILD_PARENT}}
        echo "Deploying release version: $${VERSION}"

        # T√©l√©charger l'archive depuis le bucket releases
        echo "Downloading release archive..."
        aws s3 cp s3://drone-bucket-s3-restaurant-realease/restaurant-website-release-$${VERSION}.tar.gz .
        echo "Downloaded restaurant-website-release-$${VERSION}.tar.gz"

        # Extraire l'archive
        echo "üì¶ Extracting release..."
        mkdir -p public
        tar -xzf restaurant-website-release-$${VERSION}.tar.gz -C public
        echo "Extracted release $${VERSION}"

        # D√©ployer sur le bucket production
        echo "üö¢ Deploying to production bucket..."
        aws s3 sync public/ s3://drone-bucket-s3-restaurant --delete
        echo "Successfully deployed release $${VERSION} to production!"
